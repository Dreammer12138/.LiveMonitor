#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time     : 2021/07/24
# @Author   : See-Night
# @Blog     : https://1145141919810.wang
# @License  : MIT


"""DD Monitor —— a CLI script that record live stream automatically

Params:
+ -r/--room :   Live room id
+ -o/--outpath: Video save path

Example:
$ ./Monitor -r 12235923 -o ~/videos
"""


"""MIT License

Copyright (c) 2021 See-Night

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""


import requests
import time
import os
import datetime
import sys
import getopt
from typing import Any
from bilibili_api import live, sync


opts, args = getopt.getopt(sys.argv[1:], "r:o:", ["room=", "outpath="])
print('[DD Monitor] Monitor Start')


#参数检测
try:
    for opt, val in opts :
        if opt in ("-r", "--room") :
            room = val
            print('[DD Monitor] Room ID \033[1m{}\033[0m'.format(room))
        if opt in ("-o", "--outpath") :
            path = os.path.abspath(val)
            print('[DD Monitor] Output Path \033[1m{}\033[0m'.format(path))
except getopt.GetoptError as e:
    sys.exit()


async def connectCheck(room: str) -> str:
    """ Check the connection status
 
    You need to provide a roomid to the function so that it can 
    detect the connection status and generate a status code.

    Args:
        room: Live room's id

    Returns:
        A number named status code will be returned.
        It has 3 different value:
        - 0: Live is closed
        - 1: Live is started
        - 2: Live is not closed but it is rotating 
             from library that uploaded videos
    """
    r = live.LiveRoom(room)
    return (await r.get_room_play_info())['live_status']


def formatByte(Byte: str) -> str:
    """ Format bytes as easy-to-read values

    If you have a long bytes value, e.g., 516789154431byte, 
    it looks diffcult to read. So it needs to be formated 
    into an easy-to-read form.
    
    Args:
        Byte: a byte value.

    Returns:
        A string that easy-to-read bytes value.
        It will be formated into G/M/K/B four form.
    """
    if Byte >= 1073741824:
        res = '{}G'.format(round(Byte/1073741824, 2))
    elif Byte >= 1048576:
        res = '{}M'.format(round(Byte/1048576, 2))
    elif Byte >= 1024:
        res = '{}K'.format(round(Byte/1024, 2))
    else:
        res = '{}B'.format(round(Byte, 2))
    return res


async def recordLive(room: str, path: str) -> Any:
    """ Record live stream

    Record bilibili live stream accroding to setted roomid.

    Args:
        room: live room's id
        path: the path where save files
    """
    r = live.LiveRoom(room)
    streamInfo = await r.get_room_play_url()
    url = streamInfo['durl'][0]['url']

    title = (await r.get_room_info())['room_info']['title']

    filename = '{}_{}'.format(datetime.datetime.now().strftime('%Y-%m-%d'), title)

    response = requests.get(url, headers={"User-Agent": "Mozilla/5.0", "Referer": "https://www.bilibili.com/"}, stream=True)

    with open('{}/{}.flv'.format(path, filename), 'wb') as f:
        byteCount = 0
        now = datetime.datetime.now()
        nb = byteCount
        speed = '0B/s'
        for data in response.iter_content(chunk_size=1024):
            byteCount += len(data)
            stdout = formatByte(byteCount)

            interval = datetime.datetime.now()
            if (interval - now).seconds >= 1:
                now = interval
                flow = byteCount - nb
                speed = '{}/s'.format(formatByte(flow))
                nb = byteCount
            print(
                '[DD Monitor] Recorded {:>8s} @ {:15s}'.format(
                    stdout,
                    speed
                ),
                end="\r",
                file=sys.stdout,
                flush=True
            )
            f.write(data)
            f.flush()
    print('[DD Monitor] Save to {}/{}.flv'.format(path, filename))
    return


while True:
    try:
        print('[DD Monitor] {:20s}'.format('Monitor is working'))
        liveStatus = sync(connectCheck(room))
        if liveStatus == 1:
            print('[DD Monitor] \033[1;32m● {}\033[0m'.format('Live Start'))
            try:
                sync(recordLive(room, path))
                print('[DD Monitor] Live Closed')
            except KeyboardInterrupt:
                print('\r\033[K[DD Monitor] \033[1;31m● Error\033[0m You Stoped Recording')
        time.sleep(120)
    except KeyboardInterrupt:
        print('\r[DD Monitor] Monitor Stop')
        break
